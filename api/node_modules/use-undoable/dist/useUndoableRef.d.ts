import type { MutationBehavior, Options } from './types';
declare const useUndoableRef: <T = any>(initialPresent: T, options?: Options) => [T, (payload: T | ((oldValue: T) => T), behavior?: "mergePastReversed" | "mergePast" | "destroyFuture" | "keep future" | undefined) => void, {
    past: T[];
    future: T[];
    undo: () => void;
    canUndo: boolean;
    redo: () => void;
    canRedo: boolean;
    reset: (initialState?: T | undefined) => void;
    resetInitialState: (newInitialState: T) => void;
    static_setState: (payload: T | ((oldValue: T) => T), behavior?: "mergePastReversed" | "mergePast" | "destroyFuture" | "keep future" | undefined) => void;
}];
export default useUndoableRef;
