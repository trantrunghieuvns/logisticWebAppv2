{"version":3,"file":"index.modern.js","sources":["../src/errors.ts","../src/mutate.ts","../src/reducer.ts","../src/useUndoable.ts"],"sourcesContent":["const payloadError = (func: string) => {\n\tthrow new Error(`NoPayloadError: ${func} requires a payload.`);\n};\n\nconst invalidBehavior = (behavior: string) => {\n\tthrow new Error(`Mutation behavior must be one of: mergePastReversed, mergePast, keepFuture, or destroyFuture. Not: ${behavior}`);\n}\n\nexport {\n\tpayloadError,\n\tinvalidBehavior,\n}","import { payloadError, invalidBehavior } from './errors';\n\nimport type { Action, State } from './types';\n\nconst ensureLimit = (limit: number | undefined, arr: any[]) => {\n\t// Ensures that the `past` array doesn't exceed\n\t// the specified `limit` amount. This is referred\n\t// to as the `historyLimit` within the public API.\n\n\t// The conditional check in the `mutate` function\n\t// might pass a potentially `undefined` value,\n\t// therefore we check if it's valid here.\n\tif (!limit) return arr;\n\n\tlet n = [...arr];\n\n\tif (n.length <= limit) return arr;\n\n\tconst exceedsBy = n.length - limit;\n\n\tif (exceedsBy === 1) {\n\t\t// This isn't faster than splice, but it works;\n\t\t// therefore, we're leaving it.\n\t\t// https://www.measurethat.net/Benchmarks/Show/3454/0/slice-vs-splice-vs-shift-who-is-the-fastest-to-keep-con\n\t\tn.shift();\n\t} else {\n\t\t// This shouldn't ever happen, I think.\n\t\tn.splice(0, exceedsBy);\n\t}\n\n\treturn n;\n}\n\nconst mutate = (state: State, action: Action) => {\n\tconst { past, present, future } = state;\n\tconst {\n\t\tpayload,\n\t\tbehavior,\n\t\thistoryLimit,\n\t\tignoreIdenticalMutations,\n\t\tcloneState,\n\t\tignoreAction,\n\t} = action;\n\n\tif (!payload) {\n\t\t// A mutation call requires a payload.\n\t\t// I guess we _could_ simply set the state\n\t\t// to `undefined` with an empty payload,\n\t\t// but this would probably be considered\n\t\t// unexpected behavior.\n\t\t//\n\t\t// If you want to set the state to `undefined`,\n\t\t// pass that explicitly.\n\t\tpayloadError('mutate');\n\t}\n\n\tif (ignoreAction) {\n\t\treturn {\n\t\t\tpast,\n\t\t\tpresent: payload,\n\t\t\tfuture,\n\t\t};\n\t}\n\n\tlet mPast = [...past];\n\n\tif (\n\t\thistoryLimit !== 'infinium' &&\n\t\thistoryLimit !== 'infinity'\n\t) {\n\t\tmPast = ensureLimit(historyLimit, past);\n\t}\n\n\tconst isEqual = JSON.stringify(payload) === JSON.stringify(present);\n\n\tif (ignoreIdenticalMutations && isEqual) {\n\t\treturn cloneState ? { ...state } : state;\n\t}\n\n\t// We need to clone the array here because\n\t// calling `future.reverse()` will mutate the\n\t// existing array, causing the `mergePast` and\n\t// `mergePastReversed` behaviors to work the same\n\t// way.\n\tconst futureClone = [...future];\n\n\tconst behaviorMap = {\n\t\tmergePastReversed: {\n\t\t\tpast: [...mPast, ...futureClone.reverse(), present],\n\t\t\tpresent: payload,\n\t\t\tfuture: []\n\t\t},\n\t\tmergePast: {\n\t\t\tpast: [...mPast, ...future, present],\n\t\t\tpresent: payload,\n\t\t\tfuture: []\n\t\t},\n\t\tdestroyFuture: {\n\t\t\tpast: [...mPast, present],\n\t\t\tpresent: payload,\n\t\t\tfuture: []\n\t\t},\n\t\tkeepFuture: {\n\t\t\tpast: [...mPast, present],\n\t\t\tpresent: payload,\n\t\t\tfuture,\n\t\t}\n\t}\n\n\t// TypeScript tells us that the `behavior` key is possibly\n\t// `undefined` because of the optional value specified in\n\t// the Action type. Of course, since the `setState` function\n\t// in the `useUndoable.ts` file sets a default value for this\n\t// parameter, we know it'll always be defined on calls to\n\t// `mutate`. Therefore, we can ignore this.\n\t//\n\t// It was left potentially undefined within the Action\n\t// type so that all calls to `dispatch` don't need to\n\t// specify the behavior.\n\n\t// @ts-ignore\n\tif (!behaviorMap.hasOwnProperty(behavior)) invalidBehavior(behavior);\n\t\n\t// @ts-ignore\n\treturn behaviorMap[behavior];\n};\n\nexport {\n\tmutate,\n}","import { mutate } from './mutate';\nimport { payloadError } from './errors';\n\nimport type { Action, State } from './types';\n\nconst reducer = (state: State, action: Action): State => {\n\tconst { past, present, future } = state;\n\n\tconst undo = () => {\n\t\tif (past.length === 0) {\n\t\t\treturn state;\n\t\t}\n\n\t\tconst previous = past[past.length - 1];\n\t\tconst newPast = past.slice(0, past.length - 1);\n\n\t\treturn {\n\t\t\tpast: newPast,\n\t\t\tpresent: previous,\n\t\t\tfuture: [present, ...future]\n\t\t};\n\t}\n\n\tconst redo = () => {\n\t\tif (future.length === 0) {\n\t\t\treturn state;\n\t\t}\n\n\t\tconst next = future[0];\n\t\tconst newFuture = future.slice(1);\n\n\t\treturn {\n\t\t\tpast: [...past, present],\n\t\t\tpresent: next,\n\t\t\tfuture: newFuture\n\t\t}\n\t}\n\n\tconst update = () => mutate(state, action);\n\n\tconst reset = () => {\n\t\tconst { payload } = action;\n\n\t\treturn {\n\t\t\tpast: [],\n\t\t\tpresent: payload,\n\t\t\tfuture: []\n\t\t};\n\t};\n\n\tconst resetInitialState = () => {\n\t\tconst { payload } = action;\n\n\t\tif (!payload) {\n\t\t\tpayloadError('resetInitialState');\n\t\t}\n\n\t\t// Duplicate the past for mutation\n\t\tlet mPast = [...past];\n\t\tmPast[0] = payload;\n\n\t\treturn {\n\t\t\tpast: [...mPast],\n\t\t\tpresent,\n\t\t\tfuture: [...future]\n\t\t};\n\t}\n\n\tconst actions = {\n\t\tundo,\n\t\tredo,\n\t\tupdate,\n\t\treset,\n\t\tresetInitialState\n\t}\n\n\treturn actions[action.type]();\n};\n\nexport {\n\treducer\n}\n","import { useReducer, useCallback } from 'react';\n\nimport { reducer } from './reducer';\n\nimport type { MutationBehavior, Options } from './types';\n\nconst initialState = {\n\tpast: [],\n\tpresent: null,\n\tfuture: [],\n};\n\nconst defaultOptions: Options = {\n\tbehavior: 'mergePastReversed',\n\thistoryLimit: 100,\n\tignoreIdenticalMutations: true,\n\tcloneState: false,\n};\n\nconst compileMutateOptions = (options: Options) => ({\n\t...defaultOptions,\n\t...options,\n});\n\nconst useUndoable = <T = any>(\n\tinitialPresent: T,\n\toptions: Options = defaultOptions\n): [\n\tT,\n\t(\n\t\tpayload: T | ((oldValue: T) => T),\n\t\tbehavior?: MutationBehavior,\n\t\tignoreAction?: boolean\n\t) => void,\n\t{\n\t\tpast: T[];\n\t\tfuture: T[];\n\t\tundo: () => void;\n\t\tcanUndo: boolean;\n\t\tredo: () => void;\n\t\tcanRedo: boolean;\n\t\treset: (initialState?: T) => void;\n\t\tresetInitialState: (newInitialState: T) => void;\n\t\tstatic_setState: (\n\t\t\tpayload: T,\n\t\t\tbehavior?: MutationBehavior,\n\t\t\tignoreAction?: boolean\n\t\t) => void;\n\t}\n] => {\n\tconst [state, dispatch] = useReducer(reducer, {\n\t\t...initialState,\n\t\tpresent: initialPresent,\n\t});\n\n\tconst canUndo = state.past.length !== 0;\n\tconst canRedo = state.future.length !== 0;\n\n\tconst undo = useCallback(() => {\n\t\tif (canUndo) {\n\t\t\tdispatch({ type: 'undo' });\n\t\t}\n\t}, [canUndo]);\n\n\tconst redo = useCallback(() => {\n\t\tif (canRedo) {\n\t\t\tdispatch({ type: 'redo' });\n\t\t}\n\t}, [canRedo]);\n\n\tconst reset = useCallback(\n\t\t(payload = initialPresent) => dispatch({ type: 'reset', payload }),\n\t\t[]\n\t);\n\tconst resetInitialState = useCallback(\n\t\t(payload) => dispatch({ type: 'resetInitialState', payload }),\n\t\t[]\n\t);\n\n\tconst update = useCallback(\n\t\t(payload, mutationBehavior: MutationBehavior, ignoreAction: boolean) =>\n\t\t\tdispatch({\n\t\t\t\ttype: 'update',\n\t\t\t\tpayload,\n\t\t\t\tbehavior: mutationBehavior,\n\t\t\t\tignoreAction,\n\t\t\t\t...compileMutateOptions(options),\n\t\t\t}),\n\t\t[]\n\t);\n\n\t// We can ignore the undefined type error here because\n\t// we are setting a default value to options.\n\tconst setState = useCallback(\n\t\t(\n\t\t\tpayload: any,\n\n\t\t\t// @ts-ignore\n\t\t\tmutationBehavior: MutationBehavior = options.behavior,\n\t\t\tignoreAction: boolean = false\n\t\t) => {\n\t\t\treturn typeof payload === 'function'\n\t\t\t\t? update(payload(state.present), mutationBehavior, ignoreAction)\n\t\t\t\t: update(payload, mutationBehavior, ignoreAction);\n\t\t},\n\t\t[state]\n\t);\n\n\t// In some rare cases, the fact that the above setState\n\t// function changes on every render can be problematic.\n\t// Since we can't really avoid this (setState uses\n\t// state.present), we must export another function that\n\t// doesn't depend on the present state (and thus doesn't\n\t// need to change).\n\t//\n\t// Wrapping it in useCallback isn't really necessary,\n\t// but it's consistent with everything else.\n\tconst static_setState = useCallback(\n\t\t(\n\t\t\tpayload: any,\n\n\t\t\t// @ts-ignore\n\t\t\tmutationBehavior: MutationBehavior = options.behavior,\n\t\t\tignoreAction: boolean = false\n\t\t) => {\n\t\t\tupdate(payload, mutationBehavior, ignoreAction);\n\t\t},\n\t\t[]\n\t);\n\n\treturn [\n\t\tstate.present,\n\t\tsetState,\n\t\t{\n\t\t\tpast: state.past,\n\t\t\tfuture: state.future,\n\n\t\t\tundo,\n\t\t\tcanUndo,\n\t\t\tredo,\n\t\t\tcanRedo,\n\n\t\t\treset,\n\t\t\tresetInitialState,\n\t\t\tstatic_setState,\n\t\t},\n\t];\n};\n\nexport default useUndoable;\n"],"names":["payloadError","func","Error","invalidBehavior","behavior","ensureLimit","limit","arr","n","length","exceedsBy","shift","splice","mutate","state","action","past","present","future","payload","historyLimit","ignoreIdenticalMutations","cloneState","ignoreAction","mPast","isEqual","JSON","stringify","futureClone","behaviorMap","mergePastReversed","reverse","mergePast","destroyFuture","keepFuture","hasOwnProperty","reducer","undo","previous","newPast","slice","redo","next","newFuture","update","reset","resetInitialState","actions","type","initialState","defaultOptions","compileMutateOptions","options","useUndoable","initialPresent","useReducer","dispatch","canUndo","canRedo","useCallback","mutationBehavior","setState","static_setState"],"mappings":"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"}